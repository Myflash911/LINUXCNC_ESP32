/*    This is a component of LinuxCNC for external step generator over UDP
 *    Copyright 2021 Juhász Zoltán <juhasz.zoltan at freemail dot hu>
 *
 *    version: 20220330
 *
 *    This program is free software; you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation; either version 2 of the License, or
 *    (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program; if not, write to the Free Software
 *    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

component udp "HAL2UDP";

pin in  float   #.position_cmd[3]   = 0.0   "Commanded position in position units";
pin in  float   #.velocity_cmd[3]   = 0.0   "Commanded velocity in position units/s";
pin out float   #.position_fb[3]    = 0.0   "Feedback position in position units";
pin out float   #.velocity_fb[3]    = 0.0   "Feedback velocity in position units/s";

pin in  bit     out.##[6]           = 0     "Digital output";
pin in  float   pwm.##[6]           = 0.0   "PWM output 0...1";
pin out bit     in.##[8]            = 0     "Digital inputs";

pin out bit     ready               = 0     "Module state";
pin in  bit     enable              = 0     "Module enable";
pin out s32     packets             = 0     "Lost packets";

param   rw  u32     #.dirsetup[3]   = 1     "Minimum time from a direction change to the beginning of the next step pulse in ns";
param   rw  float   #.scale[3]      = 1.0   "Steps per position unit";
param   rw  float   #.accel[3]      = 1.0   "Acceleration in position units/s2";
param   rw  u32     pwm.##.freq[6]  = 0     "PWM frequency in Hz";

/*-------------------------------------*/

option singleton;
option extra_setup;
option extra_cleanup;

function _;

license "GPL"; // indicates GPL v2 or later
;;

/*-------------------------------------*/

#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>

struct FB {
    uint8_t control;
    uint8_t io;
    int32_t pos[3];
    float   vel[3];
} fb = { 0, 0, 0, 0, 0, 0.0, 0.0, 0.0 };

struct CMD {
    uint8_t control;
    uint8_t io;
    uint16_t pwm[6];
    int32_t pos[3];
    float vel[3];
} cmd = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0f, 0.0f, 0.0f };


#define CTRL_DIRSETUP 0b00000001
#define CTRL_ACCEL    0b00000010
#define CTRL_PWMFREQ  0b00000100
#define CTRL_READY    0b01000000
#define CTRL_ENABLE   0b10000000

#define IO_00 0b00000001
#define IO_01 0b00000010
#define IO_02 0b00000100
#define IO_03 0b00001000
#define IO_04 0b00010000
#define IO_05 0b00100000
#define IO_06 0b01000000
#define IO_07 0b10000000

#define BUFSIZE 1500 // 60
#define SEND_TIMEOUT_US 100
#define RECV_TIMEOUT_US 100
#define REMOTE_IP "192.168.96.54"
#define REMOTE_UDP_PORT 58427

int sockfd, n;
struct sockaddr_in server;
struct timeval timeout;
char txbuf[BUFSIZE];
char rxbuf[BUFSIZE];

/*-------------------------------------*/

EXTRA_SETUP()
{
    sockfd = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
    server.sin_family = AF_INET;
    server.sin_port = htons(REMOTE_UDP_PORT);
    server.sin_addr.s_addr = inet_addr(REMOTE_IP);
    timeout.tv_sec = 0;
    timeout.tv_usec = RECV_TIMEOUT_US;
    setsockopt(sockfd, SOL_SOCKET, SO_RCVTIMEO, (char*)&timeout, sizeof(timeout));
    timeout.tv_usec = SEND_TIMEOUT_US;
    setsockopt(sockfd, SOL_SOCKET, SO_SNDTIMEO, (char*)&timeout, sizeof(timeout));
    recv(sockfd, rxbuf, sizeof(rxbuf), 0); // dummy read, to empty buffer
    return 0;
}

EXTRA_CLEANUP()
{
    close(sockfd);
}

FUNCTION(_)
{
    if (enable) cmd.control = CTRL_ENABLE;
    else cmd.control = 0;
    if (ready) {
        cmd.control |= CTRL_READY;
        for (int i = 0; i < 3; i++) {
            cmd.vel[i] = (float)_velocity_cmd(i) * (float)_scale(i);
            cmd.pos[i] = (float)_position_cmd(i) * (float)_scale(i);
        }
        if (out(0)) cmd.io = IO_00;
        else cmd.io = 0;
        if (out(1)) cmd.io |= IO_01;
        if (out(2)) cmd.io |= IO_02;
        if (out(3)) cmd.io |= IO_03;
        if (out(4)) cmd.io |= IO_04;
        if (out(5)) cmd.io |= IO_05;
        for (int i = 0; i < 6; i++) {
            cmd.pwm[i] = (float)pwm(i) * 1023.0f;
            if (cmd.pwm[i] > 1023) cmd.pwm[i] = 1023;
        }
    } else {
        if (!(fb.control & CTRL_DIRSETUP)) {
            cmd.control = CTRL_DIRSETUP;
            for (int i = 0; i < 3; i++) cmd.pos[i] = _dirsetup(i);
        } else if (!(fb.control & CTRL_ACCEL)) {
            cmd.control = CTRL_ACCEL;
            for (int i = 0; i < 3; i++) cmd.pos[i] = (float)_accel(i) * (float)_scale(i);
        } else if (!(fb.control & CTRL_PWMFREQ)) {
            cmd.control = CTRL_PWMFREQ;
            for (int i = 0; i < 6; i++) cmd.pwm[i] = pwm_freq(i);
        }
    }
    memcpy(&txbuf, &cmd, sizeof(cmd));
    uint8_t chk = 71;
    for (int i = 0; i < sizeof(cmd); i++) chk ^= txbuf[i];
    txbuf[sizeof(cmd)] = chk;
    n = sendto(sockfd, txbuf, sizeof(cmd) + 1, 0, &server, sizeof(server));
    packets++;
    if (n < 0) ready = 0;
    else {
        n = recv(sockfd, rxbuf, sizeof(fb), 0);
        if (n < 0) ready = 0;
        else {
            packets--;
            memcpy(&fb, &rxbuf, sizeof(fb));
            for (int i = 0; i < 3; i++) _position_fb(i) = fb.pos[i] / (float)_scale(i);
            for (int i = 0; i < 3; i++) _velocity_fb(i) = fb.vel[i] / (float)_scale(i);
            in(0) = fb.io & IO_00;
            in(1) = fb.io & IO_01;
            in(2) = fb.io & IO_02;
            in(3) = fb.io & IO_03;
            in(4) = fb.io & IO_04;
            in(5) = fb.io & IO_05;
            in(6) = fb.io & IO_06;
            in(7) = fb.io & IO_07;
            ready = fb.control & CTRL_READY;
        }
    }
}
